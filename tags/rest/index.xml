<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rest on (-> c r u d)</title><link>https://youkale.github.io/tags/rest/</link><description>Recent content in rest on (-> c r u d)</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sat, 21 May 2022 12:32:29 +0800</lastBuildDate><atom:link href="https://youkale.github.io/tags/rest/index.xml" rel="self" type="application/rss+xml"/><item><title>如何设计RESTful API</title><link>https://youkale.github.io/posts/how-to-design-restful-api/</link><pubDate>Sat, 21 May 2022 12:32:29 +0800</pubDate><guid>https://youkale.github.io/posts/how-to-design-restful-api/</guid><description>什么是REST Wiki中REST全称是 (Representational State Transfer) &amp;ldquo;表现层状态转换&amp;rdquo;, 也有翻译是“表征状态转移”，是Roy Thomas Fielding博士在2000年提出的一种基于Http协议的软件架构风格。表征状态转移,听起来很晦涩，是因为前面主语 Resource 被去掉了，真正的全称是 Resource Representational State Transfer 也就是: 资源在网络中以某种表现形式进行状态转移。
Resource：资源，即数据（前面说过网络的核心）。比如 users，corp等； Representational：某种表现形式，比如用JSON，XML，JPEG等； State Transfer：状态变化。通过HTTP动词实现。 REST等级 Level-0 The Ramp of Plain Old XML 说明 服务端使用统一的请求路径，通过请求体中某个字段定义业务类型，需要定义错误码。
调用 对照文档中 action 类型进行传参, 同时对响应错误码进行处理。
POST /server Content-Type: Application/json { &amp;#34;action&amp;#34;:&amp;#34;001&amp;#34;, &amp;#34;data&amp;#34;: { &amp;#34;username&amp;#34;:&amp;#34;...&amp;#34;, } } ----- Response ----- Status: 200 Content-Type: application/json { &amp;#34;status&amp;#34;: &amp;#34;A00001&amp;#34; &amp;#34;data&amp;#34;: { .... } } Level-1 Resource: 引入资源的RPC 说明 在微服务盛行的今天，引入了URI，方便网关层对请求进行转发，同时能通过URI能反映出对应的业务，需要定义错误码。
调用 对照文档中资源动作，进行传递参数，同时对响应错误码进行处理。</description></item></channel></rss>